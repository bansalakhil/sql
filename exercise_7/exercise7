Q2: We use EXPLAIN to optimize slow SQL queries used in our application. Lets say we have a comments table in our application that has a foreign key, user_id, referencing to users table. EXPLAINing the query that finds all the comments made by a user gives us following result.

mysql> EXPLAIN SELECT * FROM comments WHERE user_id = 41;

+-------------+------+---------------+---------+-------+---------+-------------+
| select_type | type | key | key_len | ref | rows | Extra |
+-------------+------+---------------+---------+-------+---------+-------------+
| SIMPLE | ALL | NULL | NULL | NULL | 1002345 | Using where |
+-------------+------+---------------+---------+-------+---------+-------------+

mysql> SELECT count(id) FROM comments;

+-----------+
| count(id) |
+-----------+
| 1002345 |
+-----------+

2.1 The value under 'rows' column in the output of EXPLAIN query and SELECT query after it are same. What does it mean?

ans: it means it will scan all the rows of the comments table to look for the desired row/rows.

2.2 Is the SELECT query optimal? If no, how do we optimize it?
ans : it is not optimal since it begins with the first row and then read through the entire table to find the relevant rows.we can optimize it by adding indexes .in other words for this table we can add an index to the user_id column.

mysql> insert into comments values(1,'a'),(2,'g'),(3,'g'),(4,'f'),(5,'s'),(6,'v'),(7 ,'jh'),(8,'d'),(9,'x');
Query OK, 9 rows affected (0.03 sec)
Records: 9  Duplicates: 0  Warnings: 0

mysql> explain select * from comments where user_id=8;
+----+-------------+----------+------+---------------+------+---------+------+------+-------------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------------+
|  1 | SIMPLE      | comments | ALL  | NULL          | NULL | NULL    | NULL |    9 | Using where |
+----+-------------+----------+------+---------------+------+---------+------+------+-------------+
1 row in set (0.00 sec)

mysql> create index user_id_index  on comments(user_id);
Query OK, 0 rows affected (0.28 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> explain select * from comments where user_id=8;
+----+-------------+----------+------+---------------+---------------+---------+-------+------+-------------+
| id | select_type | table    | type | possible_keys | key           | key_len | ref   | rows | Extra       |
+----+-------------+----------+------+---------------+---------------+---------+-------+------+-------------+
|  1 | SIMPLE      | comments | ref  | user_id_index | user_id_index | 5       | const |    1 | Using where |
+----+-------------+----------+------+---------------+---------------+---------+-------+------+-------------+
1 row in set (0.00 sec)

as we can see the no of scan operation reduces on indexing.
--------------------------------------------------------------------------------------------------------------------------------------------------------

Q3. In Rails world, we have someting called polymorphic associations (http://guides.rubyonrails.org/association_basics.html#polymorphic-associations). Lets say in our web application, we can let users comment on photographs and articles. Some of rows in comments table are represented as following:

mysql> SELECT * FROM comments LIMIT 5;

+----+------------------+----------------+---------+
| id | commentable_type | commentable_id | user_id |
+----+------------------+----------------+---------+
| 1 + Article | 1 | 1 |
+----+------------------+----------------+---------+
| 2 + Photo | 1 | 1 |
+----+------------------+----------------+---------+
| 3 + Photo | 2 | 2 |
+----+------------------+----------------+---------+
| 4 + Photo | 2 | 2 |
+----+------------------+----------------+---------+
| 5 + Article | 1 | 2 |
+----+------------------+----------------+---------+

When we need to fetch comments of a user on a particular Article or Photo we form a query like:

mysql> EXPLAIN SELECT * FROM comments WHERE commentable_id = 1 AND commentable_type = 'Article' AND user_id = 1;

+-------------+------+---------------+---------+-------+---------+-------------+
| select_type | type | key | key_len | ref | rows | Extra |
+-------------+------+---------------+---------+-------+---------+-------------+
| SIMPLE | ALL | NULL | NULL | NULL | 1000025 | Using where |
+-------------+------+---------------+---------+-------+---------+-------------+

It seems that we do not have any index on any of the columns. And whole comments table is scanned to fetch those comments.

3.1 We decide to index columns in comments table to optimize the SELECT query. What column(s) will you index in which order?

We should put most selective columns first while indexing multiple columns.MySQL cannot use an index if the columns do not form a leftmost prefix of the index. We can have a composite index key like index <index_name> (commmentable_id,commentable_type,user_id) 

-----------------------------------------------------------------------------------------------------------------------------------------------

Q4:
4.1 EXPLAIN a SELECT query against one of your databases which employs an INNER JOIN between two tables. What does the output look like? What does the values under different columns mean? Do you get only one row in EXPLAIN's output?
ans:
mysql> explain select distinct  Holdings.branch from Holdings JOIN Titles  on Holdings.title = Titles.title AND Author = 'Ann Brown'
    -> ;
+----+-------------+----------+------+---------------+-------+---------+----------------------+------+------------------------------+
| id | select_type | table    | type | possible_keys | key   | key_len | ref                  | rows | Extra                        |
+----+-------------+----------+------+---------------+-------+---------+----------------------+------+------------------------------+
|  1 | SIMPLE      | Titles   | ALL  | PRIMARY       | NULL  | NULL    | NULL                 |    5 | Using where; Using temporary |
|  1 | SIMPLE      | Holdings | ref  | title         | title | 22      | library.Titles.Title |    1 | Using index                  |
+----+-------------+----------+------+---------------+-------+---------+----------------------+------+------------------------------+
2 rows in set (0.00 sec)

 we got two rows one for each table.
 *  > select type - simple means that we are not using union or any subqueries.
    > table - two tables used one for each.
    > type 
           > 1st row- a full table scan is to be done for each value of first table.
           > 2nd row - All rows with matching index values are read from this table for each combination of rows from the previous tables.
    > possible keys - list of available keys in respective tables;
    > key - key used while executing the query. 
    > key-len the key_len column indicates the length of the key that MySQL decided to use. The length is NULL if the key column says NULL
    > ref - the ref column shows which columns or constants are compared to the index named in the key column to select rows from the table.  columns used for indexed comparision. ie null in first case and title in second. 
    > rows - show total number of rows that must be  read to execute this select statement which is 5 and 1 
    > extra -it provides tha dditional information.


4.2 Form the same select query in above question using a subquery instead of a JOIN. What does the EXPLAIN output look like now? Which query is better and why?

mysql> explain select distinct branch from Holdings where title in (select Title from Titles where Author='Ann Brown');
+----+--------------------+----------+-----------------+---------------+---------+---------+------+------+--------------------------+
| id | select_type        | table    | type            | possible_keys | key     | key_len | ref  | rows | Extra                    |
+----+--------------------+----------+-----------------+---------------+---------+---------+------+------+--------------------------+
|  1 | PRIMARY            | Holdings | index           | NULL          | PRIMARY | 28      | NULL |   10 | Using where; Using index |
|  2 | DEPENDENT SUBQUERY | Titles   | unique_subquery | PRIMARY       | PRIMARY | 22      | func |    1 | Using where              |
+----+--------------------+----------+-----------------+---------------+---------+---------+------+------+--------------------------+
2 rows in set (0.00 sec)

 we got two rows in explain output one for each table.
 *  > select type - primary means outer most select
                    DEPENDENT SUBQUERY it  is dependent on the primary select.
    > table - two tables used one for each.
    > type 
           > 1st row- rows with matching index values are read from this table
           > 2nd row - as rows with matching index values are read from this table for each combination of rows from the previous tables.
    > possible keys - list of available keys in respective tables;
    > key - key used while executing the query. 
    > key_len - the key_len column indicates the length of the key that MySQL decided to use.
    > ref - columns used for indexed comparision
    > rows - show total number of rows that  must be read to execute this select statement which is 10 and 1.
    > extra -it provides tha dditional information.

join is better than the subquery as in the latter case we have to perform scan accross ten rows which is 5 in the first case.    
